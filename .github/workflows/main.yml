# This workflow builds multiple versions of the s0ck3t binary

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Set up the docker base info
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-x64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get the current dynamic git version numbers
        id: get_versions
        run: |
          git clone https://github.com/xcape-inc/ci-tools.git --branch main --single-branch .git/ci-tools
          . .git/ci-tools/get_tag_from_git.sh > /dev/null
          echo "cur_version=${CUR_VERSION}" >> $GITHUB_OUTPUT
          echo "long_form_cur_version=${LONG_FORM_CUR_VERSION}" >> $GITHUB_OUTPUT
          BUILD_VER=$(printf '%s' "${CUR_VERSION}" | sed "s/^v\\([0-9.]*\\)\\(.*\\)/\\1-\\2/" | sed "s/\\(\\.*\\)-\$//")
          echo "build_version=${BUILD_VER}" >> $GITHUB_OUTPUT

      - name: show version
        run: |
          echo Short version: ${{ steps.get_versions.outputs.cur_version }}
          echo Long version: ${{ steps.get_versions.outputs.long_form_cur_version }}
          echo Build version: ${{ steps.get_versions.outputs.build_version }}
        # TODO: If not main, develop, or tag, use the long form

      - name: Set short sha
        id: shortsha
        run: echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set uid:gid
        id: uidgid
        run: echo "uid_gid=$(id -u):$(id -g)" >> $GITHUB_OUTPUT

      - name: Current uid:gid
        run: echo ${{ steps.uidgid.outputs.uid_gid }}

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.20.3' # The Go version to download (if necessary) and use.

      - name: Build amd64
        run: |
          make clean build BINARY_NAME=s0ck3t-debug BINARY_VERSION=${{ steps.get_versions.outputs.build_version }} && mv s0ck3t-debug-linux-amd64 s0ck3t_v${{ steps.get_versions.outputs.build_version }}_debug-linux-amd64
          make clean build 'LDFLAGS=-s -w' BINARY_VERSION=${{ steps.get_versions.outputs.build_version }} && mv s0ck3t-linux-amd64 s0ck3t_v${{ steps.get_versions.outputs.build_version }}_linux-amd64

      - name: Store image artifact
        uses: actions/upload-artifact@v4
        with:
          name: s0ck3t-amd64
          path: s0ck3t_v${{ steps.get_versions.outputs.build_version }}_*
          retention-days: 5

      - name: Test with Go
        run: go test -json > TestResults-amd64.json

      - name: Upload Go test results
        uses: actions/upload-artifact@v4
        with:
          name: Go-results-amd64
          path: TestResults-amd64.json

  build-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get the current dynamic git version numbers
        id: get_versions
        run: |
          git clone https://github.com/xcape-inc/ci-tools.git --branch main --single-branch .git/ci-tools
          . .git/ci-tools/get_tag_from_git.sh > /dev/null
          echo "cur_version=${CUR_VERSION}" >> $GITHUB_OUTPUT
          echo "long_form_cur_version=${LONG_FORM_CUR_VERSION}" >> $GITHUB_OUTPUT
          BUILD_VER=$(printf '%s' "${CUR_VERSION}" | sed "s/^v\\([0-9.]*\\)\\(.*\\)/\\1-\\2/" | sed "s/\\(\\.*\\)-\$//")
          echo "build_version=${BUILD_VER}" >> $GITHUB_OUTPUT

      - name: show version
        run: |
          echo Short version: ${{ steps.get_versions.outputs.cur_version }}
          echo Long version: ${{ steps.get_versions.outputs.long_form_cur_version }}
          echo Build version: ${{ steps.get_versions.outputs.build_version }}
        # TODO: If not main, develop, or tag, use the long form

      - name: Set short sha
        id: shortsha
        run: echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set uid:gid
        id: uidgid
        run: echo "uid_gid=$(id -u):$(id -g)" >> $GITHUB_OUTPUT

      - name: Current uid:gid
        run: echo ${{ steps.uidgid.outputs.uid_gid }}

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.20.3' # The Go version to download (if necessary) and use.

      - name: Build arm64
        run: |
          make clean build BINARY_NAME=s0ck3t-debug BINARY_VERSION=${{ steps.get_versions.outputs.build_version }} && mv s0ck3t-debug-linux-arm64 s0ck3t_v${{ steps.get_versions.outputs.build_version }}_debug-linux-arm64
          make clean build 'LDFLAGS=-s -w' BINARY_VERSION=${{ steps.get_versions.outputs.build_version }} && mv s0ck3t-linux-arm64 s0ck3t_v${{ steps.get_versions.outputs.build_version }}_linux-arm64

      - name: Store image artifact
        uses: actions/upload-artifact@v4
        with:
          name: s0ck3t-arm64
          path: s0ck3t_v${{ steps.get_versions.outputs.build_version }}_*
          retention-days: 5

  build-arm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get the current dynamic git version numbers
        id: get_versions
        run: |
          git clone https://github.com/xcape-inc/ci-tools.git --branch main --single-branch .git/ci-tools
          . .git/ci-tools/get_tag_from_git.sh > /dev/null
          echo "cur_version=${CUR_VERSION}" >> $GITHUB_OUTPUT
          echo "long_form_cur_version=${LONG_FORM_CUR_VERSION}" >> $GITHUB_OUTPUT
          BUILD_VER=$(printf '%s' "${CUR_VERSION}" | sed "s/^v\\([0-9.]*\\)\\(.*\\)/\\1-\\2/" | sed "s/\\(\\.*\\)-\$//")
          echo "build_version=${BUILD_VER}" >> $GITHUB_OUTPUT

      - name: show version
        run: |
          echo Short version: ${{ steps.get_versions.outputs.cur_version }}
          echo Long version: ${{ steps.get_versions.outputs.long_form_cur_version }}
          echo Build version: ${{ steps.get_versions.outputs.build_version }}
        # TODO: If not main, develop, or tag, use the long form

      - name: Set short sha
        id: shortsha
        run: echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set uid:gid
        id: uidgid
        run: echo "uid_gid=$(id -u):$(id -g)" >> $GITHUB_OUTPUT

      - name: Current uid:gid
        run: echo ${{ steps.uidgid.outputs.uid_gid }}

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.20.3' # The Go version to download (if necessary) and use.

      - name: Build arm
        run: |
          make clean build BINARY_NAME=s0ck3t-debug BINARY_VERSION=${{ steps.get_versions.outputs.build_version }} && mv s0ck3t-debug-linux-arm s0ck3t_v${{ steps.get_versions.outputs.build_version }}_debug-linux-arm
          make clean build 'LDFLAGS=-s -w' BINARY_VERSION=${{ steps.get_versions.outputs.build_version }} && mv s0ck3t-linux-arm s0ck3t_v${{ steps.get_versions.outputs.build_version }}_linux-arm

      - name: Store image artifact
        uses: actions/upload-artifact@v4
        with:
          name: s0ck3t-arm
          path: s0ck3t_v${{ steps.get_versions.outputs.build_version }}_*
          retention-days: 5

  # This workflow contains a single job called "build"
  build-and-push-image:
    needs:
      - build-x64
      - build-arm64
      - build-arm
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # allow access to github docker registry
    permissions:
      contents: read
      packages: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # figure out what version this should be
      - name: get the current dynamic git version numbers
        id: get_versions
        run: |
          git clone https://github.com/xcape-inc/ci-tools.git --branch main --single-branch .git/ci-tools
          . .git/ci-tools/get_tag_from_git.sh > /dev/null
          echo "cur_version=${CUR_VERSION}" >> $GITHUB_OUTPUT
          echo "long_form_cur_version=${LONG_FORM_CUR_VERSION}" >> $GITHUB_OUTPUT
          BUILD_VER=$(printf '%s' "${CUR_VERSION}" | sed "s/^v\\([0-9.]*\\)\\(.*\\)/\\1-\\2/" | sed "s/\\(\\.*\\)-\$//")
          echo "build_version=${BUILD_VER}" >> $GITHUB_OUTPUT

      # displaye the detected version info
      - name: show version
        run: |
          echo Short version: ${{ steps.get_versions.outputs.cur_version }}
          echo Long version: ${{ steps.get_versions.outputs.long_form_cur_version }}
          echo Build version: ${{ steps.get_versions.outputs.build_version }}

      # the commit short sha is the main tag for the artifact as it can be directly traced to the git commit
      - name: Set short sha
        id: shortsha
        run: echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set uid:gid
        id: uidgid
        run: echo "uid_gid=$(id -u):$(id -g)" >> $GITHUB_OUTPUT

      - name: Current uid:gid
        run: echo ${{ steps.uidgid.outputs.uid_gid }}

      # figure out if we are on a branch; that can be used to tage the image too
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      # display the captured branch name
      - name: Current branch
        run: echo ${{ steps.extract_branch.outputs.branch }}

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          # Add whatever platforms you need in addition to x86_64
          platforms: 'arm64,arm'

      # configure the docker buildx environment (and use the buildkit engine)
      - name: Set up g
        uses: docker/setup-buildx-action@v3

      # authenticate to Github's docker image repo (ghcr.io)
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Automatically gather details about the image to be built. This will be the branch name and the components of the tag if this is a tag build (eg. 1,1.0,1.0.1)
      # TODO: you would need some more logic if, for example you have a v1 that should point to v1.1.x, but then spin a v1.0.x
      # as that would presently set v1 back to v1.0.x
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=sha
          labels: |
            org.opencontainers.image.ref.name=${{ github.ref }}

      - name: Download Binaries (amd64)
        uses: actions/download-artifact@v4
        id: dl_s0ck3t_amd64
        with:
          name: 's0ck3t-amd64'
          path: .docker

      - name: Download Binaries (arm64)
        uses: actions/download-artifact@v4
        id: dl_s0ck3t_arm64
        with:
          name: 's0ck3t-arm64'
          path: .docker

      - name: Download Binaries (arm)
        uses: actions/download-artifact@v4
        id: dl_s0ck3t_arm
        with:
          name: 's0ck3t-arm'
          path: .docker

      # Add some more possible tags. Right now we have commit short-sha, branch name, semver component from the commit tag
      # This adds the value of BUILD_VER from above (eg. 1.0.1a2) and latest is this is the main branch
      - name: Compute image tags
        id: get_image_tags
        shell: bash
        # append the version if on a branch and matches a version tag and append latest if on main branch
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          TAGS=$(ARRAY=( $(printf '%s' "${TAGS}") ); IFS=","; printf "${ARRAY[*]}")
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
            BUILD_VER="${{ steps.get_versions.outputs.build_version }}"
            PATTERN_MATCHED=$(printf '%s' "${BUILD_VER}" | sed -En "s/^([0-9]+\\.[0-9]+\\.[0-9]+)?.*\$/\\1/p")
            if [[ "${BUILD_VER}" == "${PATTERN_MATCHED}" ]]; then
              BUILD_MINOR_VER=$(printf '%s' "${BUILD_VER}" | sed -En "s/^([0-9]+\\.[0-9]+)?.*\$/\\1/p")
              BUILD_MAJOR_VER=$(printf '%s' "${BUILD_VER}" | sed -En "s/^([0-9]+)?.*\$/\\1/p")
              TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BUILD_VER},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BUILD_MAJOR_VER},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BUILD_MINOR_VER}"
            fi
            if [[ 'main' == "${{ steps.extract_branch.outputs.branch }}" ]]; then
              TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            fi
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      # display the tags and labels we will use for the docker image
      - name: Show docker tags and labels
        run: |
          echo "docker image tags: ${{ steps.get_image_tags.outputs.tags }}"
          echo "docker image labels: ${{ steps.meta.outputs.labels }}"
          echo "docker image description annotation: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}"

      # build the images
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .docker
          file: .docker/Dockerfile
          pull: true
          # This is handled by the outputs directive
          #push: true
          # Add whatever platforms you need
          platforms: linux/amd64,linux/arm64,linux/arm/v6
          tags: ${{ steps.get_image_tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ env.IMAGE_NAME }}-cache
          cache-to: type=registry,ref=ghcr.io/${{ env.IMAGE_NAME }}-cache,mode=max
          # TODO: need to actually translate the labels to annotations, but this is a PoC
          outputs: |
            type=registry,annotation-manifest-descriptor.org.opencontainers.image.title=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }},annotation-manifest-descriptor.org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }},annotation.org.opencontainers.image.title=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }},annotation.org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }},annotation-index.org.opencontainers.image.title=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }},annotation-index.org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}
          build-args: |
            VERSION=${{ steps.get_versions.outputs.cur_version }}
            LONG_FORM_VERSION=${{ steps.get_versions.outputs.long_form_cur_version }}
